<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <!-- Artifact identifier -->
  <artifactId>KauSoftMavenConfig</artifactId>
  <packaging>pom</packaging>
  <version>1.0-SNAPSHOT</version>

  <!-- Project -->
  <name>${project.artifactId}</name>

  <parent>
    <groupId>ch.kausoft.maven</groupId>
    <artifactId>MavenConfig</artifactId>
	<version>1.0-SNAPSHOT</version>
    <relativePath>../MavenConfig</relativePath>
  </parent>

  <properties>
    <version.KauSoftMavenConfig>1.0-SNAPSHOT</version.KauSoftMavenConfig>

    <!-- Setting the source encoding -->
    <project.build.sourceEncoding>ISO-8859-1</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>


    <!--  other third party libs -->
    <version.apache.poi>3.11</version.apache.poi>
  </properties>




  <!-- Dependency management Define widly common dependencies. Manage specific 
    dependencies in the current build root of the project Examples: Parsys and 
    TargetFramework Components are widely used. log4j, test frameworks are widely 
    used. You know what I mean. Just think about what to include here and what 
    to deal with within the specific project -->
  <dependencyManagement>
    <dependencies>

      <dependency>
        <groupId>log4j</groupId>
        <artifactId>log4j</artifactId>
        <version>1.2.17</version>
        <scope>provided</scope>
      </dependency>




      <dependency>
        <groupId>xmlunit</groupId>
        <artifactId>xmlunit</artifactId>
        <scope>test</scope>
        <version>1.3</version>
      </dependency>

    </dependencies>

  </dependencyManagement>
</project>
